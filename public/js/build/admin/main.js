$.on('click', '.action', (e) => { let data = $.buttons[e.target.dataset.url]['options']; data['_csrf'] = e.target.dataset.csrf; $.post({ url: e.target.dataset.url, data: data }).then(res => res.json()) .then(res => { if (res.csrf) { $.elements(`button[data-url="${e.target.dataset.url}"]`).forEach((k,v) => { k.dataset.csrf = res.csrf; }); } if (res.to) { window.location.href = res.to; } if (e.target.dataset.refresh) { let component = $.el(`[data-component="${e.target.dataset.refresh}"]`); e.target.dataset.url = component.dataset.fetch; Render(e); } }) });  ; $.on('click', '.render', (e) => { Render(e); }); const Render = (e) => { e.preventDefault(); e.stopPropagation(); $.loaderStart(); $.render({ url: e.target.dataset.url, el: e.target.dataset.el }).then(res => { $.loaderStop(); res.text().then(result => { if (e.target.dataset.el !== 'modal') { if (e.target.dataset.append) { $.append($.el(`[data-component="${e.target.dataset.el}"]`), result); } else { $.html($.el(`[data-component="${e.target.dataset.el}"]`), result); } } else { showModal($.el('#modal'), result); } }); $.reloadEvents(); RefreshSelects(); }); }  ;  const callback = (res) => { if (res.ok && res.reload) { if (res.to !== null && res.to !== '') { setTimeout(() => { document.location.href = $.url + res.to; }, 700); } else { setTimeout(() => { document.location.reload(); }, 700); } } };  ; let className; if (window.innerWidth > 991) { className = '.grid'; } else { className = '.right-panel'; } let element = $.el(className); if (element !== undefined && element !== null) { element.style.minHeight = window.innerHeight - $.el('nav').clientHeight + 'px'; } const menu = (e) => { if (e.target.nextElementSibling.classList.contains('d-flex')) { e.target.nextElementSibling.classList.remove('d-flex'); e.target.classList.remove('open'); } else { e.target.nextElementSibling.classList.add('d-flex'); e.target.classList.add('open'); } }; $.on('click', '.menu__burger', (e) => { $.toggle($.el('.grid aside.left-panel')); }); const prevent = (e) => { if (e.target.parentElement.nodeName === 'A' && e.target.href !== undefined && e.target.href.split('/').pop() === '#' ) { e.preventDefault(); } }; $.on('click', 'a', prevent); $.on('click', 'a.has__parent', menu);  ; let lastRandom = ''; const message = (res, selector) => { let min = Math.ceil(500); let max = Math.floor(150000); let rand = Math.floor(Math.random() * (max - min + 1)) + min; if (lastRandom !== '') { let alert = $.el(`[data-${lastRandom}=""]`); if (alert) { alert.remove(); } } let form = $.el(`form[data-action="${selector}"] .form__grid`); if (form === null) { form = $.el(`form[data-action="${selector}"]`); } lastRandom = rand; $.adjacent(form, ` <div data-${rand}="" class="alert alert-${res.ok ? 'success' : 'danger'}" role="alert"> <i class="fa fa-${res.ok ? 'check' : 'exclamation'} mr-2" style="color: ${res.ok ? '#155724' : '#721c24'};"></i> ${res.msg} </div> `, 'beforebegin'); }  ; const showModal = (modal, result) => { modal.classList.add('d-block'); modal.setAttribute('style', 'background: rgba(0,0,0,0.7)'); const content = $.el('.modal-content'); $.append(content, result); }; const registerClose = () => { $.on('click', 'button[data-dismiss="modal"]', () => { $.el('#modal').classList.remove('d-block'); $.clear($.el('.modal-content')); $.el('#modal').setAttribute('style', ''); }); }; registerClose();  ;  const RefreshSelects = () => { const selectors = $.elements('[data-select="slim"]'); if (selectors) { selectors.forEach((value => { if (value.dataset.url !== undefined && value.dataset.ssid === undefined) { new SlimSelect({ select: value, allowDeselect: true, deselectLabel: '<span class="red">✖</span>', searchingText: 'Wyszukaj...', ajax: (search, callback) => { if (search.length < 3) { callback('Need 3 characters'); return; } $.post(`${value.dataset.url}/${search}`).then(res => { callback(res); }); } }); } else if (value.dataset.ssid === undefined) { new SlimSelect({ select: value, allowDeselect: true, deselectLabel: '<span class="red">✖</span>', searchingText: 'Wyszukaj...', }); } })) } }; RefreshSelects();  ; $.on('submit', 'form', (e) => { let that = e.target; if (that.dataset.action) { e.preventDefault(); e.stopImmediatePropagation(); $.loaderStart(); $.post({ url: that.dataset.action, form: that }).then(res => { $.loaderStop(); const contentType = res.headers.get('content-type'); if (contentType && contentType.indexOf('application/json') !== -1) { res.json().then(res => { if (res === null || res === '' || res.length === 0) { return false; } if (res.html) { $.html($.el(`[data-component="${that.el}"]`), res.html); } else { let modalSelector = $.el('#modal'); if (res.ok && modalSelector.classList.contains('d-block')) { setTimeout(() => { $.el('button[data-dismiss="modal"]').click() }, 500); } } throwFormErrors(res, that.dataset.action); if (that.dataset.reload === undefined) { callback(res); } }); } else { res.text().then(res => { if (res === null || res === '') { return false; } $.html($.el(`[data-component="${that.el}"]`), res); }); } $.reloadEvents(); RefreshSelects(); }); } });  ; $.on('click', '.confirm', (e) => { let elem = e.target.dataset; const tpl = ` <div class="modal-header"> <h5 class="modal-title">${elem.title}</h5> <button type="button" class="close" data-dismiss="modal" aria-label="Close"> <span aria-hidden="true">&times;</span> </button> </div> <div class="modal-body"> <p>${elem.body}</p> </div> <div class="modal-footer"> <a class="btn is_button submit__button" href="${elem.action}">Tak</a> </div> `; $.el('#modal').classList.add('d-block'); $.el('#modal').setAttribute('style', 'background: rgba(0,0,0,0.7)'); $.append($.el('.modal-content'), tpl); registerClose(); });  ; const throwFormErrors = (res, action) => { $.elements('span.err') .forEach(e => e.remove()); $.elements('.input_error') .forEach(e => e.classList.remove('input_error')); if (res.csrf !== undefined && res.csrf !== false) { $.el(`form[data-action="${action}"] input[name="_csrf"]`).value = res.csrf; } if (Array.isArray(res.inputs)) { res.inputs.forEach((error => { let selector = $.el(`form[data-action="${action}"] input[name="${error.field}"]`); if (selector === null) { selector = $.el(`form[data-action="${action}"] textarea[name="${error.field}"]`); } if (selector === null) { selector = $.el(`form[data-action="${action}"] select[name="${error.field}"]`); } selector.classList.add('input_error'); if (selector.parentElement.children[0].classList.contains('err') === false) { $.adjacent(selector.parentElement, ` <span class="err" data-field="${error.field}"> ${error.msg} </span> `); } })) } if (res.msg) { message(res, action); } };  ; 